изменени€ в бд только через миграции(они риверсивн rails g migration create_books
(генерирует)
по€вилась в папке ƒЅ папка 2017.....

два метода јѕ - делаем операцию и ƒј”Ќ возвращаем
„≈Ќ∆
timestamps создаст два пол€ и будет создавать когда запись была создана и  когда изменена

rake db:migrate
mysql
use courses
show table
 
rake db:rollback откатить
дл€ удалени€ нужно только название таблици или колонки

когда действие не зеркально то „≈Ќ∆ не подойдет

rake db:migration:down VERSION=201703211936

rake db:migration:up VERSION=201703211936

mysql -u root -p courses
show colomns from books

mysql
use courses;
show databases;
use courses;
show tables

 rails g migration add_year_to_books
select * form schema_migrations

schema.rb - отображает структуру базы данных

rake -t ищем то что св€зано со схемой
rake db:schema:load RAILS_ENV=test 
чтобы запустить в тестовой environment

с данными в миграци€х не работают
миграци€ - структурные изменени€
если работа с данными то rake task

seeds - (зерна) дл€ первоначального заполнени€ нового проекта 
можно задать дефолтного суперадмина чтобы 
rake db:seed 

rails консоль
rails -s
есть еще 2 варианта как запустить консоль
(доступны модели контролеры либы кастомные и то что дописано расширение функц стандартн функц руби)

создать несколько миграций
попробывать откатывать миграции

ALTER TABLE tablename DROP columnname;
 SHOW COLUMNS FROM books;

rake db:reset
rails g migration RemoveColomnsFromBooks name:string

rails g migration AddColumnsToBooks name:string description:text price:string year:string
show tables;
DROP TABLE books1234
SHOW CREATE TABLE books;
SHOW INDEX FROM books1234;
SHOW TABLE STATUS;
SHOW VARIABLES;



24.03.2017
(rails g model user 
с слак вставить код )

rc
user
user = User.new
user.name = 'John'
user.surname = 'Doe'
user.email = ''

user.save
select * from users;
user.new = 'Tom'
user.email


CRUD create read update delete

User.all - показывает всех ёзеров(массивом)
User.all.map(&:email) - выт€нет почты всех
User.last - выт€гивает актив–екорд ќбьект

User.find 1 - найдет юзера у которого id = 1 при не успешном выполнении выдает Exeption тогда нужно resque заюзать! »щет только по айдишнику

User.find_by_id 1 - аналог но при не успешном результате выдаст nil тогда заюзать if nill ...

User.find_by_name_and_surname 'John', 'Doe' (вернет только первое совпадение - если нужно найти то)
User.find_all_by_name_and_surname 'John', 'Doe' 

User.find_by_email '...'

User.find_by_email 'John@mail.ru'").class
=> ActiveRecord::obj ( можем к нему делать действи€ строчные или массива)

WHERE

User.where("email='John@mail.ru'") - метод јктив–екорд ласса


User.find_by_email 'John@mail.ru'").class
=> ActiveRecord::Relation ( можем к нему делать действи€ ActiveRECORD действи€)

User.where("email='John@mail.ru' AND name='John'")
User.where("email='John@mail.ru'").class
=> ActiveRecord::Relation ( можем к нему делать действи€ SQL


User.where("email=? AND name=?" AND surname='John', email, name) - можно закинуть параметр емаил и нейм

User.where(email: email, name: name)
